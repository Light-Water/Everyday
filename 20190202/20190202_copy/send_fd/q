CMSG(3)                                       Linux Programmer's Manual                                       CMSG(3)

NNAAMMEE
       CMSG_ALIGN, CMSG_SPACE, CMSG_NXTHDR, CMSG_FIRSTHDR - access ancillary data

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssyyss//ssoocckkeett..hh>>

       ssttrruucctt ccmmssgghhddrr **CCMMSSGG__FFIIRRSSTTHHDDRR((ssttrruucctt mmssgghhddrr **_m_s_g_h));;
       ssttrruucctt ccmmssgghhddrr **CCMMSSGG__NNXXTTHHDDRR((ssttrruucctt mmssgghhddrr **_m_s_g_h,, ssttrruucctt ccmmssgghhddrr **_c_m_s_g));;
       ssiizzee__tt CCMMSSGG__AALLIIGGNN((ssiizzee__tt _l_e_n_g_t_h));;
       ssiizzee__tt CCMMSSGG__SSPPAACCEE((ssiizzee__tt _l_e_n_g_t_h));;
       ssiizzee__tt CCMMSSGG__LLEENN((ssiizzee__tt _l_e_n_g_t_h));;
       uunnssiiggnneedd cchhaarr **CCMMSSGG__DDAATTAA((ssttrruucctt ccmmssgghhddrr **_c_m_s_g));;

DDEESSCCRRIIPPTTIIOONN
       These  macros  are used to create and access control messages (also called ancillary data) that are not a part
       of the socket payload.  This control information may include the interface the packet was received on, various
       rarely  used header fields, an extended error description, a set of file descriptors or UNIX credentials.  For
       instance, control messages can be used to send additional header fields such as IP options.  Ancillary data is
       sent by calling sseennddmmssgg(2) and received by calling rreeccvvmmssgg(2).  See their manual pages for more information.

       Ancillary  data  is  a sequence of _c_m_s_g_h_d_r structures with appended data.  See the specific protocol man pages
       for the available control message types.  The maximum ancillary buffer size allowed  per  socket  can  be  set
       using _/_p_r_o_c_/_s_y_s_/_n_e_t_/_c_o_r_e_/_o_p_t_m_e_m___m_a_x; see ssoocckkeett(7).

       The _c_m_s_g_h_d_r structure is defined as follows:

           struct cmsghdr {
               size_t cmsg_len;    /* Data byte count, including header
                                      (type is socklen_t in POSIX) */
               int    cmsg_level;  /* Originating protocol */
               int    cmsg_type;   /* Protocol-specific type */
           /* followed by
              unsigned char cmsg_data[]; */
           };

       The sequence of _c_m_s_g_h_d_r structures should never be accessed directly.  Instead, use only the following macros:

       *  CCMMSSGG__FFIIRRSSTTHHDDRR()  returns  a  pointer  to the first _c_m_s_g_h_d_r in the ancillary data buffer associated with the
          passed _m_s_g_h_d_r.

       *  CCMMSSGG__NNXXTTHHDDRR() returns the next valid _c_m_s_g_h_d_r after the passed _c_m_s_g_h_d_r.  It returns NULL  when  there  isn't
          enough space left in the buffer.

       *  CCMMSSGG__AALLIIGGNN(), given a length, returns it including the required alignment.  This is a constant expression.

       *  CCMMSSGG__SSPPAACCEE()  returns the number of bytes an ancillary element with payload of the passed data length occu‐
          pies.  This is a constant expression.

       *  CCMMSSGG__DDAATTAA() returns a pointer to the data portion of a _c_m_s_g_h_d_r.

       *  CCMMSSGG__LLEENN() returns the value to store in the _c_m_s_g___l_e_n member of the _c_m_s_g_h_d_r structure, taking into  account
          any necessary alignment.  It takes the data length as an argument.  This is a constant expression.

       To create ancillary data, first initialize the _m_s_g___c_o_n_t_r_o_l_l_e_n member of the _m_s_g_h_d_r with the length of the con‐
       trol message buffer.  Use CCMMSSGG__FFIIRRSSTTHHDDRR() on the _m_s_g_h_d_r to get the first control message and CCMMSSGG__NNXXTTHHDDRR()  to
       get  all  subsequent  ones.  In each control message, initialize _c_m_s_g___l_e_n (with CCMMSSGG__LLEENN()), the other _c_m_s_g_h_d_r
       header fields, and the data portion using CCMMSSGG__DDAATTAA().  Finally, the _m_s_g___c_o_n_t_r_o_l_l_e_n field of the _m_s_g_h_d_r should
       be  set to the sum of the CCMMSSGG__SSPPAACCEE() of the length of all control messages in the buffer.  For more informa‐
       tion on the _m_s_g_h_d_r, see rreeccvvmmssgg(2).

       When the control message buffer is too short to store  all  messages,  the  MMSSGG__CCTTRRUUNNCC  flag  is  set  in  the
       _m_s_g___f_l_a_g_s member of the _m_s_g_h_d_r.

CCOONNFFOORRMMIINNGG TTOO
       This  ancillary  data  model  conforms  to the POSIX.1g draft, 4.4BSD-Lite, the IPv6 advanced API described in
       RFC 2292 and SUSv2.  CCMMSSGG__AALLIIGGNN() is a Linux extension.

NNOOTTEESS
       For portability, ancillary data should be accessed using only the macros described here.   CCMMSSGG__AALLIIGGNN()  is  a
       Linux extension and should not be used in portable programs.

       In  Linux, CCMMSSGG__LLEENN(), CCMMSSGG__DDAATTAA(), and CCMMSSGG__AALLIIGGNN() are constant expressions (assuming their argument is con‐
       stant); this could be used to declare the size of global variables.  This may not be portable, however.

EEXXAAMMPPLLEE
       This code looks for the IIPP__TTTTLL option in a received ancillary buffer:

           struct msghdr msgh;
           struct cmsghdr *cmsg;
           int *ttlptr;
           int received_ttl;

           /* Receive auxiliary data in msgh */

           for (cmsg = CMSG_FIRSTHDR(&msgh); cmsg != NULL;
                   cmsg = CMSG_NXTHDR(&msgh, cmsg)) {
               if (cmsg->cmsg_level == IPPROTO_IP
                       && cmsg->cmsg_type == IP_TTL) {
                   ttlptr = (int *) CMSG_DATA(cmsg);
                   received_ttl = *ttlptr;
                   break;
               }
           }

           if (cmsg == NULL) {
               /* Error: IP_TTL not enabled or small buffer or I/O error */
           }

       The code below passes an array of file descriptors over a UNIX domain socket using SSCCMM__RRIIGGHHTTSS:

           struct msghdr msg = { 0 };
           struct cmsghdr *cmsg;
           int myfds[NUM_FD];  /* Contains the file descriptors to pass */
           int *fdptr;
           char iobuf[1];
           struct iovec io = {
               .iov_base = iobuf,
               .iov_len = sizeof(iobuf)
           };
           union {         /* Ancillary data buffer, wrapped in a union
                              in order to ensure it is suitably aligned */
               char buf[CMSG_SPACE(sizeof(myfds))];
               struct cmsghdr align;
           } u;

           msg.msg_iov = &io;
           msg.msg_iovlen = 1;
           msg.msg_control = u.buf;
           msg.msg_controllen = sizeof(u.buf);
           cmsg = CMSG_FIRSTHDR(&msg);
           cmsg->cmsg_level = SOL_SOCKET;
           cmsg->cmsg_type = SCM_RIGHTS;
           cmsg->cmsg_len = CMSG_LEN(sizeof(int) * NUM_FD);
           fdptr = (int *) CMSG_DATA(cmsg);    /* Initialize the payload */
           memcpy(fdptr, myfds, NUM_FD * sizeof(int));

SSEEEE AALLSSOO
       rreeccvvmmssgg(2), sseennddmmssgg(2)

       RFC 2292

CCOOLLOOPPHHOONN
       This page is part of release 4.15 of the Linux _m_a_n_-_p_a_g_e_s project.  A description of the  project,  information
       about    reporting    bugs,    and    the    latest    version    of    this    page,    can   be   found   at
       https://www.kernel.org/doc/man-pages/.

Linux                                                 2017-09-15                                              CMSG(3)
